{
	"Repository Layer": {
		"prefix": "repository",
		"body": [
		  "package repository",
		  "",
		  "import (",
		  "\t\"${2:another}/models/domain\"",
		  "\t\"errors\"",
		  "",
		  "\t\"gorm.io/gorm\"",
		  ")",
		  "",
		  "type ${1:label}Repository interface {",
		  "\tAll() []domain.${1:label}",
		  "\tCreate(d domain.${1:label}) domain.${1:label}",
		  "\tUpdate(d domain.${1:label}) domain.${1:label}",
		  "\tDelete(d domain.${1:label})",
		  "\tFindById(id uint) (domain.${1:label}, error)",
		  "}",
		  "",
		  "type ${1:label}Connection struct {",
		  "\tconnection *gorm.DB",
		  "}",
		  "",
		  "func New${1:label}Repository(connection *gorm.DB) ${1:label}Repository {",
		  "\treturn &${1:label}Connection{connection: connection}",
		  "}",
		  "",
		  "func (conn *${1:label}Connection) All() []domain.${1:label} {",
		  "\tvar ${2:another}${1:label}Service []domain.${1:label}",
		  "\tc.connection.Find(&${2:another}${1:label}Service)",
		  "\treturn ${2:another}${1:label}Service",
		  "}",
		  "",
		  "func (conn *${1:label}Connection) Create(d domain.${1:label}) domain.${1:label} {",
		  "\tc.connection.Save(&d)",
		  "\treturn d",
		  "}",
		  "",
		  "func (conn *${1:label}Connection) Update(d domain.${1:label}) domain.${1:label} {",
		  "\tc.connection.Save(&d)",
		  "\treturn d",
		  "}",
		  "",
		  "func (conn *${1:label}Connection) Delete(d domain.${1:label}) {",
		  "\tc.connection.Delete(&d)",
		  "}",
		  "",
		  "func (conn *${1:label}Connection) FindById(id uint) (domain.${1:label}, error) {",
		  "\tvar ${2:another} domain.${1:label}",
		  "\tc.connection.Find(&${2:another}, \"id = ?\", id)",
		  "\tif ${2:another}.ID == 0 {",
		  "\treturn ${2:another}, errors.New(\"id not found\")",
		  "\t}",
		  "\treturn ${2:another}, nil",
		  "}",
		  ""
		],
		"description": "Repository Layer"
	  },
	  "Service Layer": {
		"prefix": "service",
		"body": [
		  "package service",
		  "",
		  "import (",
		  "\t\"${1:label}/models/domain\"",
		  "\t\"${1:label}/models/web\"",
		  "\t\"${1:label}/repository\"",
		  "",
		  "\t\"github.com/mashingan/smapping\"",
		  ")",
		  "",
		  "type ${2:another}Service interface {",
		  "\tAll() []domain.${2:another}",
		  "\tCreate(req web.${2:another}Request) (domain.${2:another}, error)",
		  "\tFindById(id uint) (domain.${2:another}, error)",
		  "\tUpdate(req web.${2:another}UpdateRequest) (domain.${2:another}, error)",
		  "\tDelete(id uint) error",
		  "}",
		  "",
		  "type ${1:label}Service struct {",
		  "\t${1:label}Repository repository.${2:another}Repository",
		  "}",
		  "",
		  "func New${2:another}Service(${1:label}Repository repository.${2:another}Repository) ${2:another}Service {",
		  "\treturn &${1:label}Service{${1:label}Repository: ${1:label}Repository}",
		  "}",
		  "",
		  "func (${1:label}Service *${1:label}Service) All() []domain.${2:another} {",
		  "\treturn ${1:label}Service.${1:label}Repository.All()",
		  "}",
		  "",
		  "func (${1:label}Service *${1:label}Service) Create(request web.${2:another}Request) (domain.${2:another}, error) {",
		  "\t${1:label} := domain.${2:another}{}",
		  "\terr := smapping.FillStruct(&${1:label}, smapping.MapFields(&request))",
		  "",
		  "\tif err != nil {",
		  "\treturn ${1:label}, err",
		  "\t}",
		  "",
		  "\t// _, err = ${1:label}Service.${1:label}Repository.IsDuplicateEmail(request.Email)",
		  "\t// if err != nil {",
		  "\t// return ${1:label}, err",
		  "\t// }",
		  "\treturn ${1:label}Service.${1:label}Repository.Create(${1:label}), nil",
		  "}",
		  "",
		  "func (${1:label}Service *${1:label}Service) Update(req web.${2:another}UpdateRequest) (domain.${2:another}, error) {",
		  "\t${1:label} := domain.${2:another}{}",
		  "\tres, err := ${1:label}Service.${1:label}Repository.FindById(req.ID)",
		  "\tif err != nil {",
		  "\treturn ${1:label}, err",
		  "\t}",
		  "\terr = smapping.FillStruct(&${1:label}, smapping.MapFields(&req))",
		  "\tif err != nil {",
		  "\treturn ${1:label}, err",
		  "\t}",
		  "\t//${1:label}.ID = res.ID",
		  "\t${1:label}.User_id = res.User_id",
		  "\treturn ${1:label}Service.${1:label}Repository.Update(${1:label}), nil",
		  "}",
		  "",
		  "func (${1:label}Service *${1:label}Service) FindById(id uint) (domain.${2:another}, error) {",
		  "\t${1:label}, err := ${1:label}Service.${1:label}Repository.FindById(id)",
		  "\tif err != nil {",
		  "\treturn ${1:label}, err",
		  "\t}",
		  "\treturn ${1:label}, nil",
		  "}",
		  "",
		  "func (${1:label}Service *${1:label}Service) Delete(id uint) error {",
		  "\t${1:label}, err := ${1:label}Service.${1:label}Repository.FindById(id)",
		  "\tif err != nil {",
		  "\treturn err",
		  "\t}",
		  "\ts.${1:label}Repository.Delete(${1:label})",
		  "\treturn nil",
		  "}"
		],
		"description": "Service Layer"
	  },
	  "Controller Layer": {
		"prefix": "Controller",
		"body": [
		  "package controller",
		  "",
		  "import (",
		  "\t\"net/http\"",
		  "\t\"${1:label}/helper\"",
		  "\t\"${1:label}/models/web\"",
		  "\t\"${1:label}/service\"",
		  "\t\"strconv\"",
		  "",
		  "\t\"github.com/gin-gonic/gin\"",
		  ")",
		  "",
		  "type ${2:another}Controller interface {",
		  "\tAll(context *gin.Context)",
		  "\tFindById(context *gin.Context)",
		  "\tInsert(context *gin.Context)",
		  "\tUpdate(context *gin.Context)",
		  "\tDelete(context *gin.Context)",
		  "}",
		  "",
		  "type ${1:label}Controller struct {",
		  "\t${1:label}Service service.${2:another}Service",
		  "}",
		  "",
		  "func New${2:another}Controller(${1:label}Service service.${2:another}Service) ${2:another}Controller {",
		  "\treturn &${1:label}Controller{",
		  "\t${1:label}Service: ${1:label}Service,",
		  "\t}",
		  "}",
		  "",
		  "func (${3:var}Controller *${1:label}Controller) All(context *gin.Context) {",
		  "\t${3:var}${1:label}Service := ${3:var}Controller.${1:label}Service.All()",
		  "\twebResponse := web.WebResponse{",
		  "\tCode:   http.StatusOK,",
		  "\tStatus: \"Success\",",
		  "\tErrors: \"\",",
		  "\tData:   ${3:var}${1:label}Service,",
		  "\t}",
		  "\tcontext.JSON(http.StatusOK, webResponse)",
		  "}",
		  "",
		  "func (${3:var}Controller *${1:label}Controller) FindById(context *gin.Context) {",
		  "\tidString := context.Param(\"id\")",
		  "\tid, err := strconv.ParseUint(idString, 10, 64)",
		  "\tok := helper.NotFoundError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\t${3:var}, err := ${3:var}Controller.${1:label}Service.FindById(uint(id))",
		  "\tok = helper.NotFoundError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\twebResponse := web.WebResponse{",
		  "\tCode:   http.StatusOK,",
		  "\tStatus: \"Success\",",
		  "\tErrors: \"\",",
		  "\tData:   ${3:var},",
		  "\t}",
		  "\tcontext.JSON(http.StatusOK, webResponse)",
		  "}",
		  "",
		  "func (${3:var}Controller *${1:label}Controller) Insert(context *gin.Context) {",
		  "\tvar request web.${2:another}Request",
		  "\terr := context.BindJSON(&request)",
		  "\tok := helper.InternalServerError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\trequest.User_id = 1",
		  "\t${3:var}, err := ${3:var}Controller.${1:label}Service.Create(request)",
		  "\tok = helper.InternalServerError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\twebResponse := web.WebResponse{",
		  "\tCode:   http.StatusOK,",
		  "\tStatus: \"Success\",",
		  "\tErrors: \"\",",
		  "\tData:   ${3:var},",
		  "\t}",
		  "\tcontext.JSON(http.StatusOK, webResponse)",
		  "}",
		  "",
		  "func (${3:var}Controller *${1:label}Controller) Update(context *gin.Context) {",
		  "\tvar request web.${2:another}UpdateRequest",
		  "\tidString := context.Param(\"id\")",
		  "\tid, err := strconv.ParseUint(idString, 10, 64)",
		  "\tok := helper.NotFoundError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\trequest.ID = uint(id)",
		  "\terr = context.BindJSON(&request)",
		  "\tok = helper.ValidationError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\t${3:var}, err := ${3:var}Controller.${1:label}Service.Update(request)",
		  "\tok = helper.InternalServerError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\twebResponse := web.WebResponse{",
		  "\tCode:   http.StatusOK,",
		  "\tStatus: \"Success\",",
		  "\tErrors: \"\",",
		  "\tData:   ${3:var},",
		  "\t}",
		  "\tcontext.JSON(http.StatusOK, webResponse)",
		  "}",
		  "",
		  "func (${3:var}Controller *${1:label}Controller) Delete(context *gin.Context) {",
		  "\tidString := context.Param(\"id\")",
		  "\tid, err := strconv.ParseUint(idString, 10, 64)",
		  "\tok := helper.NotFoundError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\terr = ${3:var}Controller.${1:label}Service.Delete(uint(id))",
		  "\tok = helper.NotFoundError(context, err)",
		  "\tif ok {",
		  "\treturn",
		  "\t}",
		  "\twebResponse := web.WebResponse{",
		  "\tCode:   http.StatusOK,",
		  "\tStatus: \"Success\",",
		  "\tErrors: \"\",",
		  "\tData:   \"Data has been removed\",",
		  "\t}",
		  "\tcontext.JSON(http.StatusOK, webResponse)",
		  "}"
		],
		"description": "Controller Layer"
	  },
	  "Injector": {
		"prefix": "Injector",
		"body": [
		  "//go:build wireinject",
		  "// +build wireinject",
		  "",
		  "package injector",
		  "",
		  "import (",
		  "\t\"${1:label}/controller\"",
		  "\t\"${1:label}/repository\"",
		  "\t\"${1:label}/service\"",
		  "",
		  "\t\"github.com/google/wire\"",
		  "\t\"gorm.io/gorm\"",
		  ")",
		  "",
		  "var ${1:label}Set = wire.NewSet(",
		  "\trepository.New${2:another}Repository,",
		  "\tservice.New${2:another}Service,",
		  "\tcontroller.New${2:another}Controller,",
		  ")",
		  "",
		  "func Init${2:another}(db *gorm.DB) controller.${2:another}Controller {",
		  "\twire.Build(",
		  "\t${1:label}Set,",
		  "\t)",
		  "\treturn nil",
		  "}"
		],
		"description": "Injector"
	  },
	  "Routes": {
		"prefix": "Route APIs",
		"body": [
		  "package routes",
		  "",
		  "import (",
		  "\t\"${1:label}/injector\"",
		  "\t\"${1:label}/middleware\"",
		  "",
		  "\t\"github.com/gin-contrib/cors\"",
		  "\t\"github.com/gin-gonic/gin\"",
		  "\t\"gorm.io/gorm\"",
		  ")",
		  "",
		  "func New${2:another}Routes(db *gorm.DB, route *gin.Engine) {",
		  "\t${1:label}Controller := injector.Init${2:another}(db)",
		  "\t${1:label}Route := route.Group(\"/api/v1/${1:label}\")",
		  "\t${1:label}Route.Use(middleware.ErrorHandler())",
		  "\t${1:label}Route.Use(cors.Default())",
		  "\t${1:label}Route.GET(\"/\", ${1:label}Controller.All)",
		  "\t${1:label}Route.GET(\"/:id\", ${1:label}Controller.FindById)",
		  "\t${1:label}Route.POST(\"/\", ${1:label}Controller.Insert)",
		  "\t${1:label}Route.PUT(\"/:id\", ${1:label}Controller.Update)",
		  "\t${1:label}Route.DELETE(\"/:id\", ${1:label}Controller.Delete)",
		  "}"
		],
		"description": "Routes"
	  }
}